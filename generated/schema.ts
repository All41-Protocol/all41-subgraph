// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class WalletPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WalletPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WalletPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WalletPool", id.toString(), this);
    }
  }

  static load(id: string): WalletPool | null {
    return changetype<WalletPool | null>(store.get("WalletPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get daiInPool(): BigInt {
    let value = this.get("daiInPool");
    return value!.toBigInt();
  }

  set daiInPool(value: BigInt) {
    this.set("daiInPool", Value.fromBigInt(value));
  }

  get cDaiInPool(): BigInt {
    let value = this.get("cDaiInPool");
    return value!.toBigInt();
  }

  set cDaiInPool(value: BigInt) {
    this.set("cDaiInPool", Value.fromBigInt(value));
  }
}

export class All41Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save All41Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type All41Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("All41Deposit", id.toString(), this);
    }
  }

  static load(id: string): All41Deposit | null {
    return changetype<All41Deposit | null>(store.get("All41Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get daiInPool(): BigInt {
    let value = this.get("daiInPool");
    return value!.toBigInt();
  }

  set daiInPool(value: BigInt) {
    this.set("daiInPool", Value.fromBigInt(value));
  }

  get cDaiInPool(): BigInt {
    let value = this.get("cDaiInPool");
    return value!.toBigInt();
  }

  set cDaiInPool(value: BigInt) {
    this.set("cDaiInPool", Value.fromBigInt(value));
  }

  get totalCost(): BigInt {
    let value = this.get("totalCost");
    return value!.toBigInt();
  }

  set totalCost(value: BigInt) {
    this.set("totalCost", Value.fromBigInt(value));
  }

  get daiAmount(): BigInt {
    let value = this.get("daiAmount");
    return value!.toBigInt();
  }

  set daiAmount(value: BigInt) {
    this.set("daiAmount", Value.fromBigInt(value));
  }

  get tradingFeeInvested(): BigInt {
    let value = this.get("tradingFeeInvested");
    return value!.toBigInt();
  }

  set tradingFeeInvested(value: BigInt) {
    this.set("tradingFeeInvested", Value.fromBigInt(value));
  }
}

export class All41Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save All41Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type All41Withdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("All41Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): All41Withdrawal | null {
    return changetype<All41Withdrawal | null>(store.get("All41Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get daiInPool(): BigInt {
    let value = this.get("daiInPool");
    return value!.toBigInt();
  }

  set daiInPool(value: BigInt) {
    this.set("daiInPool", Value.fromBigInt(value));
  }

  get cDaiInPool(): BigInt {
    let value = this.get("cDaiInPool");
    return value!.toBigInt();
  }

  set cDaiInPool(value: BigInt) {
    this.set("cDaiInPool", Value.fromBigInt(value));
  }

  get daiRedeemed(): BigInt {
    let value = this.get("daiRedeemed");
    return value!.toBigInt();
  }

  set daiRedeemed(value: BigInt) {
    this.set("daiRedeemed", Value.fromBigInt(value));
  }
}
